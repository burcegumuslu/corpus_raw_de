{"title": "Exception und Error Handling", "author": null, "url": null, "hostname": null, "description": null, "sitename": null, "date": null, "id": null, "license": null, "body": null, "comments": "", "commentsbody": null, "raw_text": null, "text": "Werden Exceptions geworfen, so sollten f\u00fcr die Fehlerauswertung m\u00f6glichst viele (ausreichende) Informationen zur Verf\u00fcgung stehen.\nEs muss nachvollziebar sein, wo und unter welchen Umst\u00e4nden (Kontext) ein Fehler auftrat. Mit einem einfachen\nthrow new RuntimeException(\"Eine\nMeldung\") ist das in der Regel nicht zu erreichen.\nFerner ist eine Einheitlichkeit des Fehlerhandlings \u00fcber die Anwendung anzutreben. Damit wird es auch einfacher, Fehler automatisiert aufzusp\u00fchren und auszuwerten.\nSiehe auch \u201cMaximize Human Participation\u201d from \u201cPatterns for Fault Tolerant Software\u201d (\n[https://www.oreilly.com/library/view/patterns-for-fault/9780470319796/](https://www.oreilly.com/library/view/patterns-for-fault/9780470319796/))\nIn der Regel werden unchecked Exceptions verwendet. Checkt Exceptions werden nur in bestimmten Ausnahmef\u00e4llen verwendet. Diese k\u00f6nnen sein:\nVergleiche auch \u201cEffective Java 3rd Edition\u201d:\n@TransactionalAnnotation von spring-tx und ejb behandeln checked und uncheked Exceptions unterschiedlich\nSpezielle Exceptions bzw. eine Hierarchie von Exceptions werden nur dann erzeugt, wenn diese Exceptions eine spezielle Behandlung\nin einen\ncatch Block haben sollten / k\u00f6nnten.\nIn der Regel werden beim Erzeugen oder catch / rethrow von Exceptions keine Logausgaben gemacht. Logausgaben werden gemacht, wenn eine Exception gefangen und nicht weitergeworfen wird. Dies macht meiste der \u00fcbergeordnete Exceptionhandler.\nIn der Regel wird eine\nContextedRuntimeException mit individuellem Errorkode verwendet. Dies hat folgende Vorteile:\nErrorkodes sind \u00fcber die Anwendung eindeutig. Sie setzten sich aus einem modul-spezifischem Pr\u00e4fix und einem modul-eindeutigem\nKode zusammen, z.B.\nMYMODULE_ABCX1. Die Errorkodes werden in einem modulspezifischem\nenum im root-Package des Moduls definiert.\nNeu erzeugte und geworfene\nContextedRuntimeException sollten ausreichend Kontextinformationen f\u00fcr Fehlerauswertung bereitstellen. Mit\naddContextValue kann man beliebig viele Kontextwerte erg\u00e4nzen.\nthrow new ContextedRuntimeException(MY_ERROR_CODE) .addContextValue(\"myLabel\", myValue) .addContextValue(\"otherLabel\", otherValue);\nMittels\ncatch und\nthrow kann man zu vorhandenen\nContextedRuntimeException zus\u00e4tzliche Kontextwerte erg\u00e4nzen. Dies\nkann an solchen Stellen n\u00fctlich sein, an denen f\u00fcr die Fehlerauswertung relevante Informationen zur Verf\u00fcgung stehen.\ntry { ... catch (ContextedRuntimeException e) { e.addContextValue(\"key\", myValue); throw e; }\noder etwas kompakter:\ntry { ... catch (ContextedRuntimeException e) { throw e.addContextValue(\"key\", myValue); }\nException Wrapping sollte weitgehend vermieden weden. Speziell bei mehrfachem Exception Wrapping wird der Stacktrace sehr un\u00fcbersichtlich, teilweise werden wichtige Informationen abgeschnitten. Die urspr\u00fcngliche Exception ist nicht mehr auf den ersten Blick identifizierbar.\nBei\nContextedRuntimeException ist Exception Enhancement zu bevorzugen.\nLokales Error Handling findet statt, wenn an der entsprechenden Stelle die Exception korrekt behandelt werden kann.\nBeim \u00dcbergang an Schnittstellen bei denen es nicht vorgesehen ist, dass Exception geworfen werden, mu\u00df ein Exception Handling stattfinden.\nBeispiele\nBei einem Rest-Aufruf wird im Falle eines Fehlers folgende Header zur\u00fcckgeliefert:\nX-HEADER-ERROR-CODES: Liste der Errorkodes\nX-HEADER_CID: Eine Korrelation ID\nDer Spring\nRestControllerAdvice\nRestExceptionHandler verarbeitet\nContextedRuntimeException und setzt die entsprechenden\nHeader.\nHinweis: Zum Handling von Spring MVC Exceptions benutzt man eine Subklasse von\norg.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler.\nDetails dazu siehe Javadoc der Klasse.", "language": null, "image": null, "pagetype": null, "links": ["/", "https://www.oreilly.com/library/view/patterns-for-fault/9780470319796/", "https://www.oreilly.com/library/view/patterns-for-fault/9780470319796/", "http://tutorials.jenkov.com/java-exception-handling/checked-or-unchecked-exceptions.html", "http://tutorials.jenkov.com/java-exception-handling/checked-or-unchecked-exceptions.html"]}