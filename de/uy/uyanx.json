{"title": "C++ Core Guidelines: Regeln zu Don'ts", "author": "Heise Online; Rainer Grimm", "url": "https://www.heise.de/blog/C-Core-Guidelines-Regeln-zu-Don-ts-3965137.html", "hostname": "heise.de", "description": "Dieser Artikel geht auf einige Don'ts ein. Dies sind vor allem die zwei wichtigsten Regeln des Artikels: Setze std::move nicht un\u00fcberlegt ein und wende kein Slicing an. Und los geht's.", "sitename": "Heise Online", "date": "2018-02-19", "id": null, "license": null, "body": null, "comments": "", "commentsbody": null, "raw_text": null, "text": "C++ Core Guidelines: Regeln zu Don'ts\nDieser Artikel geht auf einige Don'ts ein. Dies sind vor allem die zwei wichtigsten Regeln des Artikels: Setze std::move nicht un\u00fcberlegt ein und wende kein Slicing an. Und los geht's.\n[In Pocket speichern](https://getpocket.com/save?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Regeln-zu-Don-ts-3965137.html)\n- Rainer Grimm\nDieser Artikel geht auf einige Don'ts ein. Dies sind vor allem die zwei wichtigsten Regeln des Artikels: Setze std::move nicht un\u00fcberlegt ein und wende kein Slicing an. Und los geht's.\nHier sind alle Regeln f\u00fcr heute im Schnelldurchlauf.\n-\n[ES.56: Write std::move() only when you need to explicitly move an object to another scope](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-move)\n-\n[ES.60: Avoid new and delete outside resource management functions](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-new)\n-\n[ES.61: Delete arrays using delete[] and non-arrays using delete](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-del)\n-\n[ES.63: Don\u2019t slice](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-slice)\nDie erste Regel ist ein verkleidetes Don't.\n[ES.56: Write std::move() only when you need to explicitly move an object to another scope](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-move)\nMeist ist es nicht notwendig, explizit std::move aufzurufen. Der Compiler wendet automatisch Move-Semantik an, wenn der Ursprung einer Operation ein Rvalue ist. Ein Rvalue ist ein Objekt ohne Identit\u00e4t. Typischerweise besitzt es keinen Namen, und seine Adresse l\u00e4sst sich nicht bestimmen. Die verbleibenden Werte sind Lvalues.\nWird eine std::move-Operation auf einen Lvalue angewandt, ist das Ergebnis meist ein leeres Objekt. Der Lvalue ist danach in dem sogenannten moved-from-Zustand. Das hei\u00dft, dass dieser g\u00fcltig, aber in einem nicht genauer spezifizierten Zustand ist. Klingt seltsam? Genau! Daher gilt es nur eine Regel zu beachten: Nachdem du auf einen Lvalue wie in std::move(source) Move-Semantik angewandt hast, sind keine Annahmen \u00fcber den Zustand des Objekts source mehr zul\u00e4ssig. Sein Wert muss neu gesetzt werden.\nStopp. Ich war zu schnell. Die Regel ES.56 lautet \"you should only use std::move if you want to move an object to another scope\". Ein klassischer Anwendungsfall f\u00fcr die Move-Semantik sind Objekte, die nicht kopiert, aber verschoben werden k\u00f6nnen. Zum Beispiel will ich in dem folgenden Beispiel einen std::promise in einen anderen Thread verschieben.\n// moveExplicit.cpp\n#include <future>\n#include <iostream>\n#include <thread>\n#include <utility>\nvoid product(std::promise<int>&& intPromise, int a, int b){ // (1)\nintPromise.set_value(a * b);\n}\nint main(){\nint a= 20;\nint b= 10;\n// define the promises\nstd::promise<int> prodPromise;\n// get the futures\nstd::future<int> prodResult= prodPromise.get_future();\n// calculate the result in a separat thread\nstd::thread prodThread(product,std::move(prodPromise), a, b); // (2)\n// get the result\nstd::cout << \"20 * 10 = \" << prodResult.get() << std::endl; // 200\nprodThread.join();\n} // undefined behaviour\nDie Funktion product (1) erh\u00e4lt ihren std::promise per Rvalue-Referenz. Ein Promise kann nicht kopiert, aber verschoben werden. Daher ist in diesem Fall std::move notwendig um den Promise in den neu erzeugten Kinder-Thread zu verschieben.\nJetzt kommt aber endlichen das dicke Don't: Wende keine std::move in return-Anweisungen an:\nvector<int> make_vector() {\nvector<int> result;\n// ... load result with data\nreturn std::move(result); // bad; just write \"return result;\"\n}\nVertraue deinem Optimierer! Falls das Objekt per Kopie zur\u00fcckgegeben wird, wird der Optimierer seinen Job tun. Dies war eine Best Practice bis C++14. Das ist verbindlich mit C++17 und wird guaranteed copy elision genannt. Auch wenn diese Technik den Name \"copy\" enth\u00e4lt, optimiert der Compiler mit C++11 auch Verschiebeoperationen weg.\n[RVO](https://en.wikipedia.org/wiki/Return_value_optimization) steht f\u00fcr Return Value Optimisation und bedeutet, dass der Compiler unn\u00f6tige Copy-Operation entfernen kann. Was bisher ein Optimierungsschritt war, muss der Compiler in C++17 zusichern:\nMyType func(){\nreturn MyType{}; // (1) no copy with C++17\n}\nMyType myType = func(); // (2) no copy with C++17\nZwei unn\u00f6tige Copy-Operationen k\u00f6nnen in den paar Zeilen stattfinden. Der erste in Ausdruck (1) und die zweite in Ausdruck (2). Mit C++17 ist das nicht mehr zul\u00e4ssig.\nFalls der R\u00fcckgabewert einen Namen besitzt, hei\u00dft diese Technik NRVO. Das Akronym steht f\u00fcr Named Return Value Optimization.\nMyType func(){\nMyType myVal;\nreturn myVal; // (1) one copy allowed\n}\nMyType myType = func(); // (2) no copy with C++17\nDer feine Unterschied ist, das der Compiler mit C++17 den Wert myValue (1) kopieren darf. Hingegen findet in Ausdruck (2) definitiv kein Kopieren statt.\n[ES.60: Avoid new and delete outside resource management functions](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-new)\nJetzt kann ich mich kurz halten: Wende kein new und delete in Applikationscode an. F\u00fcr die Regel gibt es eine einfache Erinnerungshilfe:\"No naked new!\"\n[ES.61: Delete arrays using delete[] and non-arrays using delete](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-del)\nHier ist die Begr\u00fcndung f\u00fcr die letzte Regel. Ressourcenmanagement im Applikationscode ist fehleranf\u00e4llig:\nvoid f(int n)\n{\nauto p = new X[n]; // n default constructed Xs\n// ...\ndelete p; // error: just delete the object p, rather than delete the array p[]\n}\nDie Guidelines schreiben im Kommentar: \"just delete the object p\". Das m\u00f6chte ich gerne noch dramatischer formulieren. Der Code besitzt undefiniertes Verhalten.\nZuerst einmal. Was ist Slicing? Slicing bedeutet: Du kopierst ein Objekt w\u00e4hrend einer Zuweisung oder Initialisierung und bekommst nur ein Teil des Objekts zur\u00fcck. Los geht's mit einem einfachen Beispiel:\n// slice.cpp\nstruct Base {\nint base{1998};\n}\nstruct Derived : Base {\nint derived{2011};\n}\nvoid needB(Base b){\n// ...\n}\nint main(){\nDerived d;\nBase b = d; // (1)\nBase b2(d); // (2)\nneedB(d); // (3)\n}\nDie Zeilen (1), (2) und (3) besitzen alle den gleichen Effekt: Der Derived-Anteil von d wird entfernt. Ich nehme an, dass war nicht im Sinne des Autors.\nIch erw\u00e4hnte es bereits in der Ank\u00fcndigung zu diesem Artikel, dass Splicing einer der dunkelsten Ecken von C++ ist. Jetzt wird es dunkel:\n// sliceVirtuality.cpp\n#include <iostream>\n#include <string>\nstruct Base {\nvirtual std::string getName() const { // (1)\nreturn \"Base\";\n}\n};\nstruct Derived : Base {\nstd::string getName() const override { // (2)\nreturn \"Derived\";\n}\n};\nint main(){\nstd::cout << std::endl;\nBase b;\nstd::cout << \"b.getName(): \" << b.getName() << std::endl; // (3)\nDerived d;\nstd::cout << \"d.getName(): \" << d.getName() << std::endl; // (4)\nBase b1 = d;\nstd::cout << \"b1.getName(): \" << b1.getName() << std::endl; // (5)\nBase& b2 = d;\nstd::cout << \"b2.getName(): \" << b2.getName() << std::endl; // (6)\nBase* b3 = new Derived;\nstd::cout << \"b3->getName(): \" << b3->getName() << std::endl; // (7)\nstd::cout << std::endl;\n}\nIn dem Beispiel erzeuge ich eine kleine Klassenhierarchie, bestehend aus einer Base- und einer Derived-Klasse. Jedes Objekt der Klassenhierarchie soll seinen Namen zur\u00fcckgeben. Dazu ist notwendig, die Methode getName (2) virtuell zu deklarieren und im Ausdruck (2) zu \u00fcberschreiben. Jetzt unterst\u00fctzt meine Klassenhierarchie Polymorphie. Das hei\u00dft, ich kann ein abgeleitetes Objekt mittels Referenz (6) oder Zeiger auf ein Objekt der Basisklasse annehmen. Unter der Decke ist das Objekt vom Typ Derived.\nDies gilt aber nicht, wenn ich nur Derived D nach Base b1 kopiere (5). In diesem Fall schl\u00e4gt Slicing zu, und ich erhalte eine Base-Objekt unter der Decke. Im Falle des Kopierens wird der deklarierte oder statische Typ verwendet. Falls jedoch eine Indirektion wie eine Referenz oder ein Zeiger zum Einsatz kommt, wird der tats\u00e4chliche oder dynamische Typ verwendet. Oft spricht die C++-Community schlicht von der fr\u00fchen versus der sp\u00e4ten Bindung.\nEs ist relativ einfach, die Regel im Kopf zu behalten: Falls sich Instanzen einer Klasse polymporph verhalten sollen, muss die Klasse zumindest eine virtuelle Methode deklarieren oder erben. Dar\u00fcber hinaus m\u00fcssen Instanzen dieser Klasse mit einer Indirektion wie einer Referenz oder einem Zeiger verwendet werden.\nNat\u00fcrlich gibt es auch ein Heilmittel gegen Slicing: Implementiere eine virtuelle clone-Funktion. Hier gibt es die Details dazu:\n[C++ Core Guidelines: Regeln f\u00fcr das Kopieren und Verschieben.](/blog/C-Core-Guidelines-Regeln-fuer-kopieren-und-verschieben-3834288.html)\nWie geht's weiter?\nIn diesem Artikel ging es nur um Son'ts. Der n\u00e4chste Artikel wird mit Do's beginnen. Verwende geschweifte Klammern f\u00fcr die Initialisierung von Daten.\nC++11- und C++14-Schulung bei Stuttgart\nIch freue mich darauf, Ihnen von 13. bis 15. M\u00e4rz\n[modernes C++ in Theorie und Praxis](http://www.modernescpp.de/index.php/c) genau vorstellen zu d\u00fcrfen. Die Schulung findet definitiv statt und es sind noch wenige Pl\u00e4tze frei.\n( [)\n](mailto:rainer@grimm-jaud.de)", "language": null, "image": "https://heise.cloudimg.io/bound/1200x1200/q85.png-lossy-85.webp-lossy-85.foil1/_www-heise-de_/developer/icons/developer_facebook_social_graph.png", "pagetype": "website", "links": ["/", "/plus/", "/api/accountservice/subscribe/plus?affiliateId=32501_HP000028_21806_3_57&wt_mc=intern.abo.plus.hp_nk.navilink.desktop1.desktop1", "/sso/login/", "#topnavigation__sub", "/ct/", "/ix/", "/tr/", "/foto/", "/mac-and-i/", "/make/", "/select/", "/newsticker/", "/developer/", "/thema/Netze", "/thema/Linux-und-Open-Source/", "/security/", "/plus/", "/tp/", "/autos/", "https://www.techstage.de/", "/tipps-tricks/", "https://jobs.heise.de/", "https://heise-academy.de/", "/download/", "/preisvergleich/", "https://business-services.heise.de/", "https://www.heise.de/tarifrechner", "/tools/", "https://spiele.heise.de", "/loseblattwerke/", "/netze/netzwerk-tools/imonitor-internet-stoerungen/", "https://shop.heise.de", "https://shop.heise.de/zeitschriften-abo/", "https://www.heise.de/sso/registration/add_subscriber_id?forward=https%3A%2F%2Fwww.heise.de%2F", "https://www.heise-events.de/", "https://www.heise-gruppe.de/artikel/Heise-als-Arbeitgeber-1812545.html", "https://mediadaten.heise.de/", "https://www.heise-gruppe.de/presse/", "https://it-kenner.heise.de/zukunft-der-arbeit/", "https://it-kenner.heise.de/hybrid-work/?utm_source=heise&utm_medium=top-Navi&utm_campaign=hp", "/newsletter/", "/benachrichtigungen/heise-bot/", "/benachrichtigungen", "${url}", "${url}", "/plus/", "/", "/", "/plus/", "/api/accountservice/subscribe/plus?affiliateId=32501_HP000028_21806_3_57&wt_mc=intern.abo.plus.hp_nk.navilink.mobile1.mobile1", "/ct/", "/ix/", "/tr/", "/foto/", "/mac-and-i/", "/make/", "/select/", "/newsticker/it/", "/newsticker/wissen/", "/newsticker/mobiles/", "/security/", "/developer/", "/newsticker/entertainment/", "/newsticker/netzpolitik/", "/newsticker/wirtschaft/", "/newsticker/journal/", "/newsticker/", "/forum/", "/mac-and-i", "/thema/K%C3%BCnstliche-Intelligenz", "/thema/Astronomie", "/thema/Windows", "/thema/Energie", "/thema/Digital-Health", "/thema/Open-Source", "/podcasts", "https://it-kenner.heise.de/zukunft-der-arbeit/", "https://it-kenner.heise.de/hybrid-work/?utm_source=heise&utm_medium=top-Navi&utm_campaign=hp", "/newsletter/", "/benachrichtigungen/heise-bot/", "/benachrichtigungen", "/newsticker/", "/developer/", "/thema/Netze", "/thema/Linux-und-Open-Source/", "/security/", "/plus/", "/tp/", "/autos/", "https://www.techstage.de/", "/tipps-tricks/", "https://jobs.heise.de/", "https://heise-academy.de/", "/download/", "/preisvergleich/", "https://business-services.heise.de/", "https://www.heise.de/tarifrechner", "/tools/", "https://spiele.heise.de", "/loseblattwerke/", "/netze/netzwerk-tools/imonitor-internet-stoerungen/", "https://shop.heise.de", "https://shop.heise.de/zeitschriften-abo/", "https://www.heise.de/sso/registration/add_subscriber_id?forward=https%3A%2F%2Fwww.heise.de%2F", "https://www.heise-events.de/", "https://www.heise-gruppe.de/artikel/Heise-als-Arbeitgeber-1812545.html", "https://mediadaten.heise.de/", "https://www.heise-gruppe.de/presse/", "https://getpocket.com/save?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Regeln-zu-Don-ts-3965137.html", "//app-eu.readspeaker.com/cgi-bin/rsent?customerid=4407&lang=de_de&readid=meldung&url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Regeln-zu-Don-ts-3965137.html%3Fseite%3Dall", "/blog/C-Core-Guidelines-Regeln-zu-Don-ts-3965137.html?view=print", "/forum/heise-Developer/Kommentare/C-Core-Guidelines-Regeln-zu-Don-ts/forum-397613/comment/", "/developer/", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-move", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-new", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-del", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-slice", "/imgs/18/2/3/6/8/3/4/0/Black_Forest_gateau20-704c1eb314811dcf.png", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-move", "https://en.wikipedia.org/wiki/Return_value_optimization", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-new", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-del", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-slice", "/imgs/18/2/3/6/8/3/4/0/sliceVirtuality-2fe73d4813202064.png", "/blog/C-Core-Guidelines-Regeln-fuer-kopieren-und-verschieben-3834288.html", "http://www.modernescpp.de/index.php/c", "mailto:rainer@grimm-jaud.de", "/forum/heise-Developer/Kommentare/C-Core-Guidelines-Regeln-zu-Don-ts/forum-397613/comment/", "/developer", "https://www.heise.de/Datenschutzerklaerung-der-Heise-Medien-GmbH-Co-KG-4860.html#datenschutz-newsletter", "https://pubads.g.doubleclick.net/gampad/clk?id=6389172368&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6386703815&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6362114051&iu=%2F6514%2FClicktracking%2Ftextlink", "http://pubads.g.doubleclick.net/gampad/clk?id=6359264763&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6347854315&iu=%2F6514%2FClicktracking", "https://pubads.g.doubleclick.net/gampad/clk?id=6397660985&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6381051000&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6392670867&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6394726060&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6387029670&iu=%2F6514%2FClicktracking", "/thema/C%E2%88%95C%2B%2B", "/thema/Programmiersprachen", "/thema/Programmierung", "/thema/Webentwicklung", "https://getpocket.com/save?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Regeln-zu-Don-ts-3965137.html", "https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Regeln-zu-Don-ts-3965137.html", "https://twitter.com/intent/tweet?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Regeln-zu-Don-ts-3965137.html&text=C%2B%2B+Core+Guidelines%3A+Regeln+zu+Don%27ts+%7C+Developer", "https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Regeln-zu-Don-ts-3965137.html", "https://reddit.com/submit?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Regeln-zu-Don-ts-3965137.html&title=C%2B%2B+Core+Guidelines%3A+Regeln+zu+Don%27ts", "/blog/C-Core-Guidelines-Regeln-zu-Don-ts-3965137.html?view=mail", "https://heise.de/-3965137", "#bottom-up", "/newsticker/", "/developer/", "/thema/Netze", "/thema/Linux-und-Open-Source/", "/security/", "/plus/", "/tp/", "/autos/", "https://www.techstage.de/", "/tipps-tricks/", "https://jobs.heise.de/", "https://heise-academy.de/", "/download/", "/preisvergleich/", "https://business-services.heise.de/", "https://www.heise.de/tarifrechner", "/tools/", "https://spiele.heise.de", "/loseblattwerke/", "/netze/netzwerk-tools/imonitor-internet-stoerungen/", "https://shop.heise.de", "https://shop.heise.de/zeitschriften-abo/", "https://www.heise.de/sso/registration/add_subscriber_id?forward=https%3A%2F%2Fwww.heise.de%2F", "https://www.heise-events.de/", "https://www.heise-gruppe.de/artikel/Heise-als-Arbeitgeber-1812545.html", "https://mediadaten.heise.de/", "https://www.heise-gruppe.de/presse/", "/newsletter/", "/benachrichtigungen/heise-bot/", "/benachrichtigungen", "/Datenschutzerklaerung-der-Heise-Medien-GmbH-Co-KG-4860.html", "javascript:window._sp_.gdpr.loadPrivacyManagerModal(756676);", "/developer/impressum.html", "/developer/kontakt/", "https://www.heise.de/developer/kontakt/?frage=3212474", "https://mediadaten.heise.de/", "/account/cancellation", "http://www.interred.de/", "https://www.plusline.net/", "https://www.heise-gruppe.de/artikel/Heise-Medien-3904998.html", "https://www.heise.de/api/accountservice/subscribe/plus?affiliateId=32501_HP000028_22018_3_57&wt_mc=intern.abo.plus.hp_nk.sticky-nat.teaser.teaser", "https://www.heise.de/api/accountservice/subscribe/plus?affiliateId=32501_HP000028_22018_3_57&wt_mc=intern.abo.plus.hp_nk.sticky-nat.teaser.teaser"]}