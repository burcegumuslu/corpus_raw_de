{"title": "C++ Core Guidelines: Smart Pointer als Funktionsparameter", "author": "Heise Online; Rainer Grimm", "url": "https://www.heise.de/blog/C-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html", "hostname": "heise.de", "description": "Die \u00dcbergabe von Smart-Pointern an Funktionen ist ein wichtiges Thema, das selten adressiert wird. Das gilt aber nicht mehr mit den C++ Core Guidelines, denn diese bieten sechs Regeln f\u00fcr std::unique_ptr und std::shared_ptr an.", "sitename": "Heise Online", "date": "2017-12-25", "id": null, "license": null, "body": null, "comments": "", "commentsbody": null, "raw_text": null, "text": "C++ Core Guidelines: Smart Pointer als Funktionsparameter\nDie \u00dcbergabe von Smart-Pointern an Funktionen ist ein wichtiges Thema, das selten adressiert wird. Das gilt aber nicht mehr mit den C++ Core Guidelines, denn diese bieten sechs Regeln f\u00fcr std::unique_ptr und std::shared_ptr an.\n[In Pocket speichern](https://getpocket.com/save?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html)\n- Rainer Grimm\nDie \u00dcbergabe von Smart-Pointern an Funktionen ist ein wichtiges Thema, das selten adressiert wird. Das gilt aber nicht mehr mit den C++ Core Guidelines, denn diese bieten sechs Regeln f\u00fcr std::unique_ptr und std::shared_ptr an.\nDie sechs Regeln verletzen das wichtige DRY-Prinzip (\n[Don't Repeat Yourself](https://en.wikipedia.org/wiki/Don't_repeat_yourself)) der Softwareentwicklung. Am Ende sind es nur vier Regeln, die unser Leben als Softwareentwickler deutlich einfacher machen. Hier sind sie.\n-\n[R.32: Take a unique_ptr<widget> parameter to express that a function assumes ownership of a widget](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-uniqueptrparam)\n-\n[R.33: Take a unique_ptr<widget>& parameter to express that a function reseats the widget](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-reseat)\n-\n[R.34: Take a shared_ptr<widget> parameter to express that a function is part owner](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-owner)\n-\n[R.35: Take a shared_ptr<widget>& parameter to express that a function might reseat the shared pointer](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam)\n-\n[R.36: Take a const shared_ptr<widget>& parameter to express that it might retain a reference count to the object ???](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-const)\n-\n[R.37: Do not pass a pointer or reference obtained from an aliased smart pointer](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-smartptrget)\nLos geht es mit den ersten zwei Regeln f\u00fcr std::unique_ptr.\n[R.32: Take a unique_ptr<widget> parameter to express that a function assumes ownership of a widget](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-uniqueptrparam)\nFalls eine Funktion Besitzer eines Widgets werden soll, soll die Funktion ihren std::unique_ptr<Widget> per Copy annehmen. Die Konsequenz ist, dass der Aufrufer der Funktion den std::unique_ptr<Widget> verschieben muss, damit der Code \u00fcbersetzt werden kann.\n#include <memory>\n#include <utility>\nstruct Widget{\nWidget(int){}\n};\nvoid sink(std::unique_ptr<Widget> uniqPtr){\n// do something with uniqPtr\n}\nint main(){\nauto uniqPtr = std::make_unique<Widget>(1998);\nsink(std::move(uniqPtr)); // (1)\nsink(uniqPtr); // (2) ERROR\n}\nDer Aufruf (1) ist syntaktisch richtig, aber der Aufruf (2) schl\u00e4gt fehl, da ein std::unique_ptr nicht kopiert werden kann. Falls deine Funktion das Widget nur verwenden will, solltest du das Widget per Zeiger oder Referenz annehmen. Der Unterschied zwischen einem Zeiger einer Referenz ist es, dass der Zeiger ein Nullzeiger sein kann.\nvoid useWidget(Widget* wid);\nvoid useWidget(Widget& wid);\n[R.33: Take a unique_ptr<widget>& parameter to express that a function reseats the widget](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-reseat)\nManchmal m\u00f6chte eine Funktion ein Widget neu setzen. In diesem Anwendungsfall solltest du den std::unique_ptr<Widget> als nichtkonstante Referenz annehmen.\n#include <memory>\n#include <utility>\nstruct Widget{\nWidget(int){}\n};\nvoid reseat(std::unique_ptr<Widget>& uniqPtr){\nuniqPtr.reset(new Widget(2003)); // (0)\n// do something with uniqPtr\n}\nint main(){\nauto uniqPtr = std::make_unique<Widget>(1998);\nreseat(std::move(uniqPtr)); // (1) ERROR\nreseat(uniqPtr); // (2)\n}\nNun schl\u00e4gt der Aufruf (1) schief, da ein Rvalue nicht an eine nichtkonstante Lvalue-Referenz gebunden werden kann. Das gilt aber nicht f\u00fcr das Kopieren in (2). Ein Lvalue kann an eine nichtkonstante Lvalue Referenz gebunden werden. Ich m\u00f6chte noch einen wichtigen Punkt hinzuf\u00fcgen. Der Aufruf (0) erzeugt nicht nur ein neues Widget(2003), auch das alte Widget(1998) wird automatisch destruiert.\nDie Erkl\u00e4rungen zu den n\u00e4chsten drei Regeln zu std::shared_ptr sind buchst\u00e4blich Wiederholungen. Daher werde ich eine Regel daraus machen.\n[R.34: Take a shared_ptr<widget> parameter to express that a function is part owner](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam) [R.35: Take a shared_ptr<widget>& parameter to express that a function might reseat the shared pointer](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam) [R.36: Take a const shared_ptr<widget>& parameter to express that it might retain a reference count to the object ???](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-const)\nHier sind die drei entscheidenden Funktionssignaturen.\nvoid share(std::shared_ptr<Widget> shaWid);\nvoid reseat(std::shard_ptr<Widget>& shadWid);\nvoid mayShare(const std::shared_ptr<Widget>& shaWid);\nDie Funktionssignaturen sollten wir in Isolation betrachten. Was bedeutet die Signatur aus der Sicht der Funktion?\n- void share(std::shared_ptr<Widget> shaWid);: Ich bin f\u00fcr die Lebenszeit des Funktionsk\u00f6rpers ein Miteigent\u00fcmer der Widget. Am Anfang des Funktionsk\u00f6rpers inkrementiere ich den Referenzz\u00e4hler und am Ende dekrementiere ich den Referenzz\u00e4hler. Daher bleibt das Widget so lange am Leben, wie ich es ben\u00f6tige.\n- void reseat(std::shard_ptr<Widget>& shadWid);: Ich bin nicht der Miteigent\u00fcmer des Widget, da ich seinen Referenzz\u00e4hler nicht erh\u00f6he. Ich besitze keine Garantie, dass das Widget g\u00fcltig ist, w\u00e4hrend ich es verwende. Ich kann das Widget aber neu setzen. Ein nichtkonstante Referenz ist eine Art ausleihen, das es erlaubt, die Ressource neu zu setzen.\n- void mayShare(const std::shared_ptr<Widget>& shaWid);: Ich leihe mir nur das Widget aus. Weder kann ich seine Lebenszeit verl\u00e4ngern noch es zur\u00fccksetzen. Um ehrlich zu sein, in diesem Fall solltest du einen Zeiger (Widget*) oder eine Referenz (Widget&) als Parameter verwenden, denn ein std::shared_ptr f\u00fcgt keinen Mehrwert hinzu.\n[R.37: Do not pass a pointer or reference obtained from an aliased smart pointer](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-smartptrget)\nUm die Regel verst\u00e4ndlich zu machen, kommt hier ein kleines Codeschnipsel.\nvoid oldFunc(Widget* wid){\n// do something with wid\n}\nvoid shared(std::shared_ptr<Widget>& shaPtr){ // (2)\noldFunc(*shaPtr); // (3)\n// do something with shaPtr\n}\nauto globShared = std::make_shared<Widget>(2011); // (1)\n...\nshared(globShared);\nglobShared (1) ist ein globaler, geteilter std::shared_ptr. Die Funktion shared nimmt ihr Argument als Referenz (2) an. Daher wird der Referenzz\u00e4hler von shaPtr nicht erh\u00f6ht, und die Funktion verl\u00e4ngert konsequenterweise auch nicht die Lebenszeit von Widget(2011). Das Problem beginnt mit (3). oldFunc erwartet einen Zeiger auf ein Widget. Damit besitzt oldFunc keine Garantie, dass Widget w\u00e4hrend ihrer Ausf\u00fchrung g\u00fcltig bleibt. oldFunc leiht sich nur das Widget aus.\nDas Heilmittel ist einfach. Du musst sicherstellen, dass der Referenzz\u00e4hler von globShared vor dem Aufruf von oldFunc erh\u00f6ht wird. Das hei\u00dft, du solltest std::shared_ptr kopieren.\n- \u00dcbergebe den std::shared_ptr per Copy:\nvoid shared(std::shared_ptr<Widget> shaPtr){\noldFunc(*shaPtr);\n// do something with shaPtr\n}\n- Lege ein Kopie von shaPtr in der Funktion shared an:\nvoid shared(std::shared_ptr<Widget>& shaPtr){\nauto keepAlive = shaPtr;\noldFunc(*shaPtr);\n// do something with keepAlive or shaPtr\n}\nDieselbe Argumentation l\u00e4sst sich nat\u00fcrlich auch auf einen std::unique_ptr anwenden. Aber f\u00fcr std::unique_ptr gibt es kein einfaches Heilmittel, da dieser nicht kopiert werden kann. Daher schlage ich vor, dass du den std::unique_ptr gegebenenfalls klonst und damit einen neuen std::unique_ptr erzeugst.\nWie geht's weiter?\nDas war der letzte von vier Artikel zum Ressourcen-Management in den C++ Core Guidelines. Die C++ Core Guidelines bietet mehr als 50 Regeln f\u00fcr Ausdr\u00fccke und Anweisungen an. Ich werde in meinem n\u00e4chsten Artikel einen genaueren Blick auf diese Regeln werfen.\nWeitere Informationen:\n- Die neuen PDF-P\u00e4ckchen stehen zum Download bereit:\n- Deutsch:\n[Multithreading: The High-Level Schnittstelle](http://www.grimm-jaud.de/index.php/blog/das-neue-pdf-paeckchen-ist-fertig-multithreading-die-high-level-schnittstelle)\n- Englisch:\n[Embedded: Performance Matters](http://www.modernescpp.com/index.php/the-new-pdf-bundle-is-available-embedded-performance-matters)", "language": null, "image": "https://heise.cloudimg.io/bound/1200x1200/q85.png-lossy-85.webp-lossy-85.foil1/_www-heise-de_/developer/icons/developer_facebook_social_graph.png", "pagetype": "website", "links": ["/", "/plus/", "/api/accountservice/subscribe/plus?affiliateId=32501_HP000028_21806_3_57&wt_mc=intern.abo.plus.hp_nk.navilink.desktop1.desktop1", "/sso/login/", "#topnavigation__sub", "/ct/", "/ix/", "/tr/", "/foto/", "/mac-and-i/", "/make/", "/select/", "/newsticker/", "/developer/", "/thema/Netze", "/thema/Linux-und-Open-Source/", "/security/", "/plus/", "/tp/", "/autos/", "https://www.techstage.de/", "/tipps-tricks/", "https://jobs.heise.de/", "https://heise-academy.de/", "/download/", "/preisvergleich/", "https://business-services.heise.de/", "https://www.heise.de/tarifrechner", "/tools/", "https://spiele.heise.de", "/loseblattwerke/", "/netze/netzwerk-tools/imonitor-internet-stoerungen/", "https://shop.heise.de", "https://shop.heise.de/zeitschriften-abo/", "https://www.heise.de/sso/registration/add_subscriber_id?forward=https%3A%2F%2Fwww.heise.de%2F", "https://www.heise-events.de/", "https://www.heise-gruppe.de/artikel/Heise-als-Arbeitgeber-1812545.html", "https://mediadaten.heise.de/", "https://www.heise-gruppe.de/presse/", "https://it-kenner.heise.de/zukunft-der-arbeit/", "https://it-kenner.heise.de/hybrid-work/?utm_source=heise&utm_medium=top-Navi&utm_campaign=hp", "/newsletter/", "/benachrichtigungen/heise-bot/", "/benachrichtigungen", "${url}", "${url}", "/plus/", "/", "/", "/plus/", "/api/accountservice/subscribe/plus?affiliateId=32501_HP000028_21806_3_57&wt_mc=intern.abo.plus.hp_nk.navilink.mobile1.mobile1", "/ct/", "/ix/", "/tr/", "/foto/", "/mac-and-i/", "/make/", "/select/", "/newsticker/it/", "/newsticker/wissen/", "/newsticker/mobiles/", "/security/", "/developer/", "/newsticker/entertainment/", "/newsticker/netzpolitik/", "/newsticker/wirtschaft/", "/newsticker/journal/", "/newsticker/", "/forum/", "/mac-and-i", "/thema/K%C3%BCnstliche-Intelligenz", "/thema/Astronomie", "/thema/Windows", "/thema/Energie", "/thema/Digital-Health", "/thema/Open-Source", "/podcasts", "https://it-kenner.heise.de/zukunft-der-arbeit/", "https://it-kenner.heise.de/hybrid-work/?utm_source=heise&utm_medium=top-Navi&utm_campaign=hp", "/newsletter/", "/benachrichtigungen/heise-bot/", "/benachrichtigungen", "/newsticker/", "/developer/", "/thema/Netze", "/thema/Linux-und-Open-Source/", "/security/", "/plus/", "/tp/", "/autos/", "https://www.techstage.de/", "/tipps-tricks/", "https://jobs.heise.de/", "https://heise-academy.de/", "/download/", "/preisvergleich/", "https://business-services.heise.de/", "https://www.heise.de/tarifrechner", "/tools/", "https://spiele.heise.de", "/loseblattwerke/", "/netze/netzwerk-tools/imonitor-internet-stoerungen/", "https://shop.heise.de", "https://shop.heise.de/zeitschriften-abo/", "https://www.heise.de/sso/registration/add_subscriber_id?forward=https%3A%2F%2Fwww.heise.de%2F", "https://www.heise-events.de/", "https://www.heise-gruppe.de/artikel/Heise-als-Arbeitgeber-1812545.html", "https://mediadaten.heise.de/", "https://www.heise-gruppe.de/presse/", "https://getpocket.com/save?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html", "//app-eu.readspeaker.com/cgi-bin/rsent?customerid=4407&lang=de_de&readid=meldung&url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html%3Fseite%3Dall", "/blog/C-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html?view=print", "/forum/heise-Developer/Kommentare/C-Core-Guidelines-Smart-Pointer-als-Funktionsparameter/forum-394293/comment/", "/developer/", "/imgs/18/2/3/4/2/8/6/3/relay-race-09882554386ba69c.png", "https://en.wikipedia.org/wiki/Don't_repeat_yourself", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-uniqueptrparam", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-reseat", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-owner", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-const", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-smartptrget", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-uniqueptrparam", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-reseat", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-sharedptrparam-const", "http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rr-smartptrget", "http://www.grimm-jaud.de/index.php/blog/das-neue-pdf-paeckchen-ist-fertig-multithreading-die-high-level-schnittstelle", "http://www.modernescpp.com/index.php/the-new-pdf-bundle-is-available-embedded-performance-matters", "/forum/heise-Developer/Kommentare/C-Core-Guidelines-Smart-Pointer-als-Funktionsparameter/forum-394293/comment/", "/developer", "https://www.heise.de/Datenschutzerklaerung-der-Heise-Medien-GmbH-Co-KG-4860.html#datenschutz-newsletter", "https://pubads.g.doubleclick.net/gampad/clk?id=6386703815&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6362114051&iu=%2F6514%2FClicktracking%2Ftextlink", "http://pubads.g.doubleclick.net/gampad/clk?id=6359264763&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6347854315&iu=%2F6514%2FClicktracking", "https://pubads.g.doubleclick.net/gampad/clk?id=6397660985&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6381051000&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6392670867&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6394726060&iu=%2F6514%2FClicktracking%2Ftextlink", "https://pubads.g.doubleclick.net/gampad/clk?id=6387029670&iu=%2F6514%2FClicktracking", "https://pubads.g.doubleclick.net/gampad/clk?id=6387712227&iu=%2F6514%2FClicktracking%2Ftextlink", "/thema/C%E2%88%95C%2B%2B", "/thema/Programmiersprachen", "/thema/Programmierung", "/thema/Webentwicklung", "https://getpocket.com/save?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html", "https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html", "https://twitter.com/intent/tweet?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html&text=C%2B%2B+Core+Guidelines%3A+Smart+Pointer+als+Funktionsparameter+%7C+Developer", "https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html", "https://reddit.com/submit?url=https%3A%2F%2Fwww.heise.de%2Fblog%2FC-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html&title=C%2B%2B+Core+Guidelines%3A+Smart+Pointer+als+Funktionsparameter", "/blog/C-Core-Guidelines-Smart-Pointer-als-Funktionsparameter-3927673.html?view=mail", "https://heise.de/-3927673", "#bottom-up", "/newsticker/", "/developer/", "/thema/Netze", "/thema/Linux-und-Open-Source/", "/security/", "/plus/", "/tp/", "/autos/", "https://www.techstage.de/", "/tipps-tricks/", "https://jobs.heise.de/", "https://heise-academy.de/", "/download/", "/preisvergleich/", "https://business-services.heise.de/", "https://www.heise.de/tarifrechner", "/tools/", "https://spiele.heise.de", "/loseblattwerke/", "/netze/netzwerk-tools/imonitor-internet-stoerungen/", "https://shop.heise.de", "https://shop.heise.de/zeitschriften-abo/", "https://www.heise.de/sso/registration/add_subscriber_id?forward=https%3A%2F%2Fwww.heise.de%2F", "https://www.heise-events.de/", "https://www.heise-gruppe.de/artikel/Heise-als-Arbeitgeber-1812545.html", "https://mediadaten.heise.de/", "https://www.heise-gruppe.de/presse/", "/newsletter/", "/benachrichtigungen/heise-bot/", "/benachrichtigungen", "/Datenschutzerklaerung-der-Heise-Medien-GmbH-Co-KG-4860.html", "javascript:window._sp_.gdpr.loadPrivacyManagerModal(756676);", "/developer/impressum.html", "/developer/kontakt/", "https://www.heise.de/developer/kontakt/?frage=3212474", "https://mediadaten.heise.de/", "/account/cancellation", "http://www.interred.de/", "https://www.plusline.net/", "https://www.heise-gruppe.de/artikel/Heise-Medien-3904998.html", "https://www.heise.de/api/accountservice/subscribe/plus?affiliateId=32501_HP000028_22018_3_57&wt_mc=intern.abo.plus.hp_nk.sticky-nat.teaser.teaser", "https://www.heise.de/api/accountservice/subscribe/plus?affiliateId=32501_HP000028_22018_3_57&wt_mc=intern.abo.plus.hp_nk.sticky-nat.teaser.teaser"]}